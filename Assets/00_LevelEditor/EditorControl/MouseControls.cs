//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/00_LevelEditor/EditorControl/MouseControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MouseControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MouseControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MouseControls"",
    ""maps"": [
        {
            ""name"": ""ActionMap"",
            ""id"": ""1024511f-0be3-4a5c-92c9-480c6bca9799"",
            ""actions"": [
                {
                    ""name"": ""MouseAction"",
                    ""type"": ""Value"",
                    ""id"": ""03de1bd6-3cb0-4ed3-bfcb-5ac4f4e258e4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GridSnap"",
                    ""type"": ""Value"",
                    ""id"": ""a2de4fef-1516-431f-9d54-e1a6f833251e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GridTogle"",
                    ""type"": ""Value"",
                    ""id"": ""96d729b8-2002-4773-abd4-80953ce21b52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseClickL"",
                    ""type"": ""Value"",
                    ""id"": ""7c5be7b2-6df8-472c-9fcb-8b65f91e02b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ae3d8eb-f541-45af-a0a3-d0cf1e9c0647"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6e1845b-6ff3-4352-a941-81a13863c3a8"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridSnap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""402d6391-2c43-4341-a8bd-01ad370f8103"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridTogle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83819ef1-3776-4bf2-8865-3e8dc03bcbca"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClickL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ActionMap
        m_ActionMap = asset.FindActionMap("ActionMap", throwIfNotFound: true);
        m_ActionMap_MouseAction = m_ActionMap.FindAction("MouseAction", throwIfNotFound: true);
        m_ActionMap_GridSnap = m_ActionMap.FindAction("GridSnap", throwIfNotFound: true);
        m_ActionMap_GridTogle = m_ActionMap.FindAction("GridTogle", throwIfNotFound: true);
        m_ActionMap_MouseClickL = m_ActionMap.FindAction("MouseClickL", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMap
    private readonly InputActionMap m_ActionMap;
    private List<IActionMapActions> m_ActionMapActionsCallbackInterfaces = new List<IActionMapActions>();
    private readonly InputAction m_ActionMap_MouseAction;
    private readonly InputAction m_ActionMap_GridSnap;
    private readonly InputAction m_ActionMap_GridTogle;
    private readonly InputAction m_ActionMap_MouseClickL;
    public struct ActionMapActions
    {
        private @MouseControls m_Wrapper;
        public ActionMapActions(@MouseControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseAction => m_Wrapper.m_ActionMap_MouseAction;
        public InputAction @GridSnap => m_Wrapper.m_ActionMap_GridSnap;
        public InputAction @GridTogle => m_Wrapper.m_ActionMap_GridTogle;
        public InputAction @MouseClickL => m_Wrapper.m_ActionMap_MouseClickL;
        public InputActionMap Get() { return m_Wrapper.m_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionMapActionsCallbackInterfaces.Add(instance);
            @MouseAction.started += instance.OnMouseAction;
            @MouseAction.performed += instance.OnMouseAction;
            @MouseAction.canceled += instance.OnMouseAction;
            @GridSnap.started += instance.OnGridSnap;
            @GridSnap.performed += instance.OnGridSnap;
            @GridSnap.canceled += instance.OnGridSnap;
            @GridTogle.started += instance.OnGridTogle;
            @GridTogle.performed += instance.OnGridTogle;
            @GridTogle.canceled += instance.OnGridTogle;
            @MouseClickL.started += instance.OnMouseClickL;
            @MouseClickL.performed += instance.OnMouseClickL;
            @MouseClickL.canceled += instance.OnMouseClickL;
        }

        private void UnregisterCallbacks(IActionMapActions instance)
        {
            @MouseAction.started -= instance.OnMouseAction;
            @MouseAction.performed -= instance.OnMouseAction;
            @MouseAction.canceled -= instance.OnMouseAction;
            @GridSnap.started -= instance.OnGridSnap;
            @GridSnap.performed -= instance.OnGridSnap;
            @GridSnap.canceled -= instance.OnGridSnap;
            @GridTogle.started -= instance.OnGridTogle;
            @GridTogle.performed -= instance.OnGridTogle;
            @GridTogle.canceled -= instance.OnGridTogle;
            @MouseClickL.started -= instance.OnMouseClickL;
            @MouseClickL.performed -= instance.OnMouseClickL;
            @MouseClickL.canceled -= instance.OnMouseClickL;
        }

        public void RemoveCallbacks(IActionMapActions instance)
        {
            if (m_Wrapper.m_ActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionMapActions @ActionMap => new ActionMapActions(this);
    public interface IActionMapActions
    {
        void OnMouseAction(InputAction.CallbackContext context);
        void OnGridSnap(InputAction.CallbackContext context);
        void OnGridTogle(InputAction.CallbackContext context);
        void OnMouseClickL(InputAction.CallbackContext context);
    }
}
